substitutions:
  updates: 60s

esphome:
  name: upower
  friendly_name: Upower

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: VERBOSE #INFO
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "YOURAPIENCRIPTIONKEY"

ota:
  password: "YOUROTAPASSWORD"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Upower Fallback Hotspot"
    password: "YOURPASSWORD"

captive_portal:
    
uart:
  id: mod_bus
  tx_pin: 1
  rx_pin: 3
  baud_rate: 115200
  stop_bits: 1

modbus:
  flow_control_pin: 2
  send_wait_time: 500ms
  id: modbus1

modbus_controller:
  - id: epever
    ## the Modbus device addr
    address: 0xA
    modbus_id: modbus1
    setup_priority: -10
    command_throttle: 500ms
    update_interval: ${updates}

binary_sensor:
- platform: modbus_controller
  modbus_controller_id: epever
  id: inverter_bypass
  name: "Inverter Bypass"
  # 0:NoBypass, 1:Bypass 
  address: 0x2100
  register_type: discrete_input

- platform: modbus_controller
  modbus_controller_id: epever
  id: day_sensor
  name: "Day sensor"
  # 0:Night, 1:Day 
  address: 0x2101
  register_type: discrete_input

switch:
  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_priority
    register_type: coil
    address: 0x0104
    name: "Grid priority"
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: inverter_energy_saving
    register_type: coil
    address: 0x0105
    name: "Inverter energy saving"
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: inverter
    register_type: coil
    address: 0x0106
    name: "Inverter"
    bitmask: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_charging
    register_type: coil
    address: 0x010C
    name: "Grid charging"
    bitmask: 1
    
#WORK IN PROGRESS
#select:
#  - platform: modbus_controller
#    modbus_controller_id: epever
#    id: charge_from
#    name: "Charge from"
#    address: 0x9616
#    optionsmap:
#      "Solar": 8
#      "Solar Priority": 2
#      "Utility & Solar": 4
#      "Utility": 1

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: ${updates}
    
  # Utility
  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_voltage
    name: "Grid Voltage"
    unit_of_measurement: V
    address: 0x3500
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01      

  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_charger_current
    name: "Grid charger Current"
    unit_of_measurement: A
    address: 0x3506
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01 

  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_charger_power_internal
    unit_of_measurement: W
    address: 0x3507
    register_type: read
    accuracy_decimals: 0
    filters:
      - multiply: 0.01
    on_raw_value:
      then:
        - lambda: |-
            id(grid_charger_power).publish_state(id(grid_charger_current).state * id(battery_voltage).state);

  - platform: template
    id: grid_charger_power
    name: "Grid charger Power"
    unit_of_measurement: W

  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_charger_temp
    name: "Grid charger temp"
    unit_of_measurement: "°C"
    address: 0x3512
    register_type: read
    filters:
      - multiply: 0.01

#WORK IN PROGRESS
#  - platform: modbus_controller
#    modbus_controller_id: epever
#    id: grid_charger_state_internal
#    address: 0x3511
#    register_type: read
#    on_raw_value:
#      then:
#        - lambda: |-
#            char buffer[20];
#            int data = int(x) & 0b0000000000000001;
#            switch(data){
#              case(0):
#                sprintf(buffer,"Normal");
#                break;
#              case(1):
#                sprintf(buffer,"Error");
#                break;
#            }
#            id(grid_charger_state).publish_state(buffer);

  - platform: modbus_controller
    modbus_controller_id: epever
    id: grid_total
    name: "Grid Total"
    unit_of_measurement: kWh
    address: 0x350F
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # PV Array
  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_voltage
    name: "PV input Voltage"
    unit_of_measurement: V
    address: 0x3519
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_current
    name: "PV input Current"
    unit_of_measurement: A
    address: 0x351A
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_power
    name: "PV input Power"
    unit_of_measurement: W
    address: 0x351B
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_output_voltage
    name: "PV output Voltage"
    unit_of_measurement: V
    address: 0x351D
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_output_current
    name: "PV output Current"
    unit_of_measurement: A
    address: 0x351E
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_output_power
    name: "PV output Power"
    unit_of_measurement: W
    address: 0x351F
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_charger_temp
    name: "PV charger temp"
    unit_of_measurement: "°C"
    address: 0x352C
    register_type: read
    filters:
      - multiply: 0.01

#WORK IN PROGRESS
#  - platform: modbus_controller
#    modbus_controller_id: epever
#    id: pv_charger_state_internal
#    address: 0x3529
#    register_type: read
#    on_raw_value:
#      then:
#        - lambda: |-
#            std::string buffer;
#            int data = int(x) & 0b0000000000000110;
#            switch(data){
#              case(0):
#                buffer = buffer + "Not charging";
#                break;
#              case(1):
#                buffer = buffer + "Float";
#                break;
#              case(2):
#                buffer = buffer + "Boost";
#                break;
#              case(3):
#                buffer = buffer + "Equalization";
#                break;
#            }
#            id(pv_charger_state).publish_state(buffer);

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_total
    name: "PV Total"
    unit_of_measurement: kWh
    address: 0x3527
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    
  # Inverter
  - platform: modbus_controller
    modbus_controller_id: epever
    id: inverter_output_voltage
    name: "Inverter output Voltage"
    unit_of_measurement: V
    address: 0x3533
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01     
  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: inverter_output_current
    name: "Inverter output Current"
    unit_of_measurement: A
    address: 0x3534
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01 

  - platform: modbus_controller
    modbus_controller_id: epever
    id: inverter_state
    name: "Inverter state"
    address: 0x3535
    register_type: read

  - platform: modbus_controller
    modbus_controller_id: epever
    id: inverter_output_apparent_power
    unit_of_measurement: W
    address: 0x3536
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    on_raw_value:
      then:
        - lambda: |-
            if(!id(inverter_bypass).state)
              id(inverter_power).publish_state(id(inverter_output_voltage).state*id(inverter_output_current).state);
            else 
              id(inverter_power).publish_state(0);

  - platform: template
    id: inverter_power
    name: "Inverter Power"
    unit_of_measurement: W
    
    # Battery
  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_voltage
    name: "Battery Voltage"
    unit_of_measurement: V
    address: 0x354C
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01     

  - platform: template
    id: battery_current
    name: "Battery current"
    unit_of_measurement: A
    lambda: !lambda |-
      return id(pv_output_current).state + id(grid_charger_current).state - id(inverter_power).state/id(battery_voltage).state;

  - platform: template
    id: battery_power
    name: "Battery power"
    unit_of_measurement: W
    lambda: !lambda |-
      return id(pv_output_power).state + (id(grid_charger_current).state * id(battery_voltage).state) - id(inverter_power).state;

  # controller calculates SOC=100%*(X-LVD)/(FCV-LVD)   X = battery voltage  LVD = low voltage disconnect FCV = Float charging voltage
  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_SOC
    name: "Battery SOC"
    unit_of_measurement: "%"
    address: 0x3550
    register_type: read
    accuracy_decimals: 1

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_temp
    name: "Battery Temp"
    unit_of_measurement: "°C"
    address: 0x354F
    register_type: read
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_state_internal
    address: 0x3553
    register_type: read
    on_raw_value:
      then:
        - lambda: |-
            //char buffer[20];
            std::string buffer;
            if(int(x) == 0){
              buffer = buffer + "Normal";
            }else{
              buffer = buffer + "Warning: ";
              int data = int(x) & 0b0000000000001111;
              switch(data){
                case(1):
                  buffer = buffer + "Over voltage, ";
                  break;
                case(2):
                  buffer = buffer + "Under voltage, ";
                  break;
                case(4):
                  buffer = buffer + "Over discharge, ";
                 break;
                case(8):
                  buffer = buffer + "Faulty battery, ";
                  break;
              }
             data = int(x) & 0b0000000001110000;
             data = data >> 4;
              switch(data){
               case(1):
                  buffer = buffer + "Over temp, ";
                  break;
                case(2):
                  buffer = buffer + "Low temp, ";
                  break;
              } 
              if(int(x) & 0b0000000100000000) buffer = buffer + "Battery inner resistance abnormal, ";
              if(int(x) & 0b1000000000000000) buffer = buffer + "Wrong indentification for rated voltage";
            }
            id(battery_state).publish_state(buffer);

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_mode
    name: "Charging Mode"
    address: 0x9607
    register_type: holding
    
  #Bypass
  - platform: modbus_controller
    modbus_controller_id: epever
    id: bypass_voltage
    name: "Bypass Voltage"
    unit_of_measurement: V
    address: 0x3558
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01     
  
  - platform: modbus_controller
    modbus_controller_id: epever
    id: bypass_current
    name: "Bypass Current"
    unit_of_measurement: A
    address: 0x3559
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01 

  - platform: modbus_controller
    modbus_controller_id: epever
    id: bypass_power_internal
    unit_of_measurement: W
    address: 0x355A
    register_type: read
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    on_raw_value:
      then:
        - lambda: |-
            if(id(inverter_bypass).state)
              id(bypass_power).publish_state(x * 0.01);
            else 
              id(bypass_power).publish_state(0);

  - platform: template
    id: bypass_power
    name: "Bypass Power"
    unit_of_measurement: W


text_sensor:
  - platform: template
    id: battery_state
    name: "Battery state"
    
#WORK IN PROGRESS
#  - platform: template
#    id: grid_charger_state
#    name: "Grid charger state"

#  - platform: template
#    id: pv_charger_state
#    name: "PV charger state"
